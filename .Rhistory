knitr::opts_chunk$set(echo = TRUE)
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(glmnet)
library(pROC)
library(readr)
library(tidyr)
data_heart <- read.csv('heart.csv') #Here we load our dataset which is heart.csv
head(data_heart) # Here we display the first six of our dataset
# Select the required variables for analysis
selected_data <- data_heart[, c("target", "age", "sex", "cp", "chol")]
head(selected_data)
#Firstly we are going to check the missing values if there are
sum(is.na(selected_data)) #After verification, there are no missing values so we procede so we don't have the columns to remove
#Check the duplicate data
duplicate_data <- data_heart[duplicated(selected_data),]
head(duplicate_data)
#From here, we want to clean ou remove the duplicate data in our dataset
data_clean <- data_heart[!duplicated(selected_data), ]
head(data_clean)
# Convert the 'sex' variable into a factor
# 0 = Female, 1 = Male
data_clean$sex <- factor(data_clean$sex, levels = c(0, 1), labels = c("Female", "Male"))
data_clean$cp <- factor(data_clean$cp, levels = c(0, 1, 2, 3),
labels = c("Type 1", "Type 2", "Type 3", "Type 4"))
# Verify the changes
str(data_clean)
data_clean$target <- as.factor(data_clean$target)
str(data_clean)
head(data_clean)
# Here we want to summarize our dataset in using summary()
summary(data_clean)
install.packages("DataExplorer")
#install.packages("DataExplorer")
library(DataExplorer)
plot_histogram(data_cleaned)
#install.packages("DataExplorer")
library(DataExplorer)
plot_histogram(data_cleaned)
#install.packages("DataExplorer")
library(DataExplorer)
plot_histogram(data_cleaned)
install.packages("DataExplorer")
library(DataExplorer)
plot_histogram(data_cleaned)
install.packages("DataExplorer")
knitr::opts_chunk$set(echo = TRUE)
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(glmnet)
library(pROC)
library(readr)
library(tidyr)
data_heart <- read.csv('heart.csv') #Here we load our dataset which is heart.csv
head(data_heart) # Here we display the first six of our dataset
# Select the required variables for analysis
selected_data <- data_heart[, c("target", "age", "sex", "cp", "chol")]
head(selected_data)
#Firstly we are going to check the missing values if there are
sum(is.na(selected_data)) #After verification, there are no missing values so we procede so we don't have the columns to remove
#Firstly we are going to check the missing values if there are
sum(is.na(selected_data)) #After verification, there are no missing values so we procede so we don't have the columns to remove
#Check the duplicate data
duplicate_data <- data_heart[duplicated(selected_data),]
head(duplicate_data)
#From here, we want to clean ou remove the duplicate data in our dataset
data_clean <- data_heart[!duplicated(selected_data), ]
head(data_clean)
# Convert the 'sex' variable into a factor
# 0 = Female, 1 = Male
data_clean$sex <- factor(data_clean$sex, levels = c(0, 1), labels = c("Female", "Male"))
data_clean$cp <- factor(data_clean$cp, levels = c(0, 1, 2, 3),
labels = c("Type 1", "Type 2", "Type 3", "Type 4"))
# Verify the changes
str(data_clean)
data_clean$target <- as.factor(data_clean$target)
str(data_clean)
head(data_clean)
# Here we want to summarize our dataset in using summary()
summary(data_clean)
install.packages("DataExplorer")
knitr::opts_chunk$set(echo = TRUE)
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(glmnet)
library(pROC)
library(readr)
library(tidyr)
data_heart <- read.csv('heart.csv') #Here we load our dataset which is heart.csv
head(data_heart) # Here we display the first six of our dataset
# Select the required variables for analysis
selected_data <- data_heart[, c("target", "age", "sex", "cp", "chol")]
head(selected_data)
#Firstly we are going to check the missing values if there are
sum(is.na(selected_data)) #After verification, there are no missing values so we procede so we don't have the columns to remove
#Check the duplicate data
duplicate_data <- data_heart[duplicated(selected_data),]
head(duplicate_data)
#From here, we want to clean ou remove the duplicate data in our dataset
data_clean <- data_heart[!duplicated(selected_data), ]
head(data_clean)
# Convert the 'sex' variable into a factor
# 0 = Female, 1 = Male
data_clean$sex <- factor(data_clean$sex, levels = c(0, 1), labels = c("Female", "Male"))
data_clean$cp <- factor(data_clean$cp, levels = c(0, 1, 2, 3),
labels = c("Type 1", "Type 2", "Type 3", "Type 4"))
# Verify the changes
str(data_clean)
data_clean$target <- as.factor(data_clean$target)
str(data_clean)
head(data_clean)
# Here we want to summarize our dataset in using summary()
summary(data_clean)
install.packages("DataExplorer")
library(DataExplorer)
plot_histogram(data_cleaned)
install.packages("DataExplorer")
library(DataExplorer)
plot_histogram(data_cleaned)
install.packages("DataExplorer")
# Convert the 'sex' variable into a factor
# 0 = Female, 1 = Male
data_clean$sex <- factor(data_clean$sex, levels = c(0, 1), labels = c("Female", "Male"))
data_clean$cp <- factor(data_clean$cp, levels = c(0, 1, 2, 3),
labels = c("Type 1", "Type 2", "Type 3", "Type 4"))
# Verify the changes
str(data_clean)
# Select the required variables for analysis
selected_data <- data_heart[, c("target", "age", "sex", "cp", "chol")]
head(selected_data)
knitr::opts_chunk$set(echo = TRUE)
# Convert the 'sex' variable into a factor
# 0 = Female, 1 = Male
data_clean$sex <- factor(data_clean$sex, levels = c(0, 1), labels = c("Female", "Male"))
data_clean$cp <- factor(data_clean$cp, levels = c(0, 1, 2, 3),
labels = c("Type 1", "Type 2", "Type 3", "Type 4"))
# Verify the changes
str(data_clean)
data_clean$target <- as.factor(data_clean$target)
str(data_clean)
head(data_clean)
# Here we want to summarize our dataset in using summary()
summary(data_clean)
#install.packages("DataExplorer")
library(DataExplorer)
plot_histogram(data_cleaned)
#install.packages("DataExplorer")
library(DataExplorer)
plot_histogram(data_clean)
# Visualize distributions
plot_histogram(data_cleaned)
# Visualize distributions
plot_histogram(data_clean)
#install.packages("DataExplorer")
library(DataExplorer)
# Visualize distributions
plot_histogram(data_clean)
#install.packages("DataExplorer")
library(DataExplorer)
# Visualize distributions
plot_histogram(data_clean)
boxplot(data_clean, by = "target") # Replace 'target' with your dependent variable name
install.packages("corrplot")  # Install if not already installed
library(corrplot)  # Load the package
# Compute the correlation matrix for numeric variables
library(dplyr)  # Ensure dplyr is loaded for select_if()
corr_matrix <- cor(select_if(data_cleaned, is.numeric))
# Correlation heatmap for numerical variables
corr_matrix <- cor(select_if(data_cleaned, is.numeric))
install.packages("corrplot")  # Install if not already installed
library(corrplot)  # Load the package
# Compute the correlation matrix for numeric variables
library(dplyr)  # Ensure dplyr is loaded for select_if()
corr_matrix <- cor(select_if(data_clean, is.numeric))
# Plot the correlation heatmap
corrplot(corr_matrix, method = "color", type = "upper", tl.col = "black")
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("corrplot")  # Install if not already installed
library(corrplot)  # Load the package
# Compute the correlation matrix for numeric variables
library(dplyr)  # Ensure dplyr is loaded for select_if()
corr_matrix <- cor(select_if(data_clean, is.numeric))
# Plot the correlation heatmap
corrplot(corr_matrix, method = "color", type = "upper", tl.col = "black")
# Correlation heatmap for numerical variables
corr_matrix <- cor(select_if(data_cleaned, is.numeric))
# Correlation heatmap for numerical variables
corr_matrix <- cor(select_if(data_clean, is.numeric))
corrplot(corr_matrix, method = "color", type = "upper", tl.col = "black")
# We have already load the ggplot2 in the beginning so don't need again here
# Assuming that our dataset is data_heart
# Convert target to a factor if not already done
#data_clean$target <- as.factor(data_clean$target)
# Here is our boxplot
ggplot(data_clean, aes(x = target, y = chol, fill = target)) +
geom_boxplot() +
labs(
title = "Boxplots of Level of Cholesterol Across Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)",
y = "Level of Cholesterol "
) +
theme_minimal() +
scale_fill_manual(values = c("green", "red"), name = "Heart Disease")
# We have already load the ggplot2 in the beginning so don't need again here
# Assuming that our dataset is data_heart
# Convert target to a factor if not already done
#data_clean$target <- as.factor(data_clean$target)
# Here is our boxplot
ggplot(data_clean, aes(x = target, y = chol, fill = target)) +
geom_boxplot() +
labs(
title = "Boxplots of Level of Cholesterol Across Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)",
y = "Level of Cholesterol "
) +
theme_minimal() +
scale_fill_manual(values = c("green", "red"), name = "Heart Disease")
# We have already load the ggplot2 in the beginning so don't need again here
# Assuming that our dataset is data_heart
# Convert target to a factor if not already done
#data_clean$target <- as.factor(data_clean$target)
# Here is our boxplot
ggplot(data_clean, aes(x = target, y = chol, fill = target)) +
geom_boxplot() +
labs(
title = "Boxplots of Level of Cholesterol Across Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)",
y = "Level of Cholesterol "
) +
theme_minimal() +
scale_fill_manual(values = c("green", "red"), name = "Heart Disease")
# We have already load the ggplot2 in the beginning so don't need again here
# Assuming that our dataset is data_heart
# Convert target to a factor if not already done
#data_clean$target <- as.factor(data_clean$target)
# Here is our boxplot
ggplot(data_clean, aes(x = target, y = chol, fill = target)) +
geom_boxplot() +
labs(
title = "Boxplots of Level of Cholesterol Across Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)",
y = "Level of Cholesterol "
) +
theme_minimal() +
scale_fill_manual(values = c("blue", "red"), name = "Heart Disease")
# Load ggplot2 package
library(ggplot2)
# Ensure the target variable is a factor
data_clean$target <- as.factor(data_clean$target)
# Create the boxplot
ggplot(data_clean, aes(x = target, y = chol, fill = target)) +
geom_boxplot() +
labs(
title = "Boxplots of Level of Cholesterol Across Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)",
y = "Level of Cholesterol"
) +
theme_minimal() +
scale_fill_manual(values = c("blue", "red"), name = "Heart Disease")
# Combine data for sex and cp with respect to target
data_sex_cp <- data_clean %>%
pivot_longer(cols = c(sex, cp), names_to = "Variable", values_to = "Value")
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(glmnet)
library(pROC)
library(readr)
library(tidyr)
data_heart <- read.csv('heart.csv') #Here we load our dataset which is heart.csv
head(data_heart) # Here we display the first six of our dataset
# Select the required variables for analysis
selected_data <- data_heart[, c("target", "age", "sex", "cp", "chol")]
head(selected_data)
#Firstly we are going to check the missing values if there are
sum(is.na(selected_data)) #After verification, there are no missing values so we procede so we don't have the columns to remove
#Check the duplicate data
duplicate_data <- data_heart[duplicated(selected_data),]
head(duplicate_data)
#From here, we want to clean ou remove the duplicate data in our dataset
data_clean <- data_heart[!duplicated(selected_data), ]
head(data_clean)
# Convert the 'sex' variable into a factor
# 0 = Female, 1 = Male
data_clean$sex <- factor(data_clean$sex, levels = c(0, 1), labels = c("Female", "Male"))
data_clean$cp <- factor(data_clean$cp, levels = c(0, 1, 2, 3),
labels = c("Type 1", "Type 2", "Type 3", "Type 4"))
# Verify the changes
str(data_clean)
data_clean$target <- as.factor(data_clean$target)
str(data_clean)
head(data_clean)
# Here we want to summarize our dataset in using summary()
summary(data_clean)
#install.packages("DataExplorer")
library(DataExplorer)
# Visualize distributions
plot_histogram(data_clean)
boxplot(data_clean, by = "target") # Replace 'target' with your dependent variable name
#install.packages("corrplot")  # Install if not already installed
library(corrplot)  # Load the package
# Compute the correlation matrix for numeric variables
library(dplyr)  # Ensure dplyr is loaded for select_if()
corr_matrix <- cor(select_if(data_clean, is.numeric))
# Plot the correlation heatmap
corrplot(corr_matrix, method = "color", type = "upper", tl.col = "black")
# Correlation heatmap for numerical variables
corr_matrix <- cor(select_if(data_clean, is.numeric))
corrplot(corr_matrix, method = "color", type = "upper", tl.col = "black")
# Load ggplot2 package
library(ggplot2)
# Ensure the target variable is a factor
data_clean$target <- as.factor(data_clean$target)
# Create the boxplot
ggplot(data_clean, aes(x = target, y = chol, fill = target)) +
geom_boxplot() +
labs(
title = "Boxplots of Level of Cholesterol Across Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)",
y = "Level of Cholesterol"
) +
theme_minimal() +
scale_fill_manual(values = c("blue", "red"), name = "Heart Disease")
# Combine data for sex and cp with respect to target
data_sex_cp <- data_clean %>%
pivot_longer(cols = c(sex, cp), names_to = "Variable", values_to = "Value")
# Create bar plots
library(ggplot2)
ggplot(data_sex_cp, aes(x = target, fill = as.factor(Value))) +  # Convert Value to factor
geom_bar(position = "dodge") +
facet_wrap(~ Variable, scales = "free", labeller = labeller(Variable = c(sex = "Sex", cp = "Chest Pain Type"))) +
labs(
title = "Bar Plots of Sex and Chest Pain Type across Heart Disease",
x = "Heart Disease (0 = No, 1 = Yes)",
y = "Count",
fill = "Category"
) +
theme_minimal() +
scale_fill_brewer(palette = "Set3")
#We fit logistic regression model respect to target
logistic_model <- glm(target ~ age + sex + cp + chol, data = data_clean, family = "binomial")
# View model summary
summary(logistic_model)
# Conversion of coefficients to odds ratios
exp(coef(logistic_model))
# from here, we have our Confidence intervals for odds ratios
exp(confint(logistic_model))
# We fit our reduce model
reduced_model <- glm(target ~ age + sex + cp, data = data_clean, family = binomial)
summary(reduced_model)
# Here we want to perform the full model with more predictors
full_model <- glm(target ~ age + sex + cp + chol + thalach, data = data_clean, family = binomial)
# Perform the Likelihood Ratio Test
anova(reduced_model, full_model, test = "Chisq")
# Predict probabilities using the full model (or reduced model)
predicted_probs <- predict(full_model, type = "response")
# Display the first few predicted probabilities
head(predicted_probs)
# Add the predicted probabilities to the dataset
data_clean$predicted_probabilities <- predicted_probs
#predicted_probs
# Convert probabilities to binary predictions using a threshold of 0.5
predicted_class <- ifelse(predicted_probs >= 0.5, 1, 0)
# we add the binary predictions to the dataset
data_clean$predicted_class <- predicted_class
# we display the first few rows with the predicted probabilities and binary predictions
head(data_clean[, c("predicted_probabilities", "predicted_class")])
#We fit the full logistic regression model
# We're predicting the target variable (presence of heart disease)
full_model <- glm(target ~ age + sex + cp + chol + thalach, data = data_clean, family = binomial)
# Predict probabilities using the fitted model
predicted_probs <- predict(full_model, type = "response")
# Convert probabilities to binary predictions using a threshold of 0.5
predicted_class <- ifelse(predicted_probs >= 0.5, 1, 0)
# Add the binary predictions to the dataset
data_clean$predicted_class <- predicted_class
# Create the confusion matrix by comparing actual values with predicted values
confusion_matrix <- table(Predicted = data_clean$predicted_class, Actual = data_clean$target)
# Print the confusion matrix
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate performance metrics
# Accuracy: (TP + TN) / Total
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
# Precision: TP / (TP + FP)
precision <- confusion_matrix[2, 2] / sum(confusion_matrix[2, ])
# Recall: TP / (TP + FN)
recall <- confusion_matrix[2, 2] / sum(confusion_matrix[, 2])
# F1-Score: 2 * (Precision * Recall) / (Precision + Recall)
f1_score <- 2 * (precision * recall) / (precision + recall)
# Print the metrics
cat("Accuracy: ", accuracy, "\n")
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
cat("F1-Score: ", f1_score, "\n")
# Install the pROC package if you haven't already
#install.packages("pROC")
# Load the pROC package
library(pROC)
# Generate the ROC curve
roc_curve <- roc(data_clean$target, predicted_probs)
# Plot the ROC curve
plot(roc_curve, main = "ROC Curve for Heart Disease Prediction", col = "blue", lwd = 2)
# Calculate the AUC
auc_value <- auc(roc_curve)
# Display the AUC value
auc_value
